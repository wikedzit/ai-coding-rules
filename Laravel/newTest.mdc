---
description: Apply these rules when Reviewing, editing or adding new tests
globs: 
alwaysApply: false
---
# Testing:
- If any test files are updated, you must run the tests to ensure the changes do not break existing functionality.
- Remember Migrations are the always the source of truth.
- Never Run  all tests at once, Run them with filter
- When running specific tests use the command ./vendor/bin/sail test --filter=<test name>
- Collect and do a deep Review the output that is generated by the test.
- Determine the part of the codebase that is causing the error.
- Follow through the execution path to where the error is coming from to pinpoint the exact file and line of code that is causing the error. e.g Follow the endpint that is called to the controler actions and then to the service and then to the model and then to the migration.
- Detemine the MOST relevant fix for the error at that point.
- Check the migrations to establish and verify the fields that we have. Migration will always serve as the source of truth.
- Check the model to see if all fields and relatiships are correctly defined base on the migration. Do the same for Services, Request, Policy, Imports, Controller, Routes .etc
- Factories must be redefined to reflect what we have in the migrations and model
- Tests should not change the codebase rather should test what we have. Therefof if need be you must replace the test code completly to reflect what we have in Migrations/Model/Factory.
- Fixing Tests MUST create files
- Never at any point change any migration rather update eveyrthing to keep the integrity of the migration and schema deginitions
- DO not create new migrations  or edit any exiting migrations. IF anything is not defined in the migration shemas it them means we have to delete - since it is not longer needed thefore update the code to drop referencing or using that table/model/column/Controlle or Factory/Service/Reqest.
- When adding or modifying tests, never update existing migrations, and Do not create new ones.
- When fixing a broken test, you may completely remove and redefine that and ensure it accurately verifies the current state of the codebase.
- When defining test cases, do not use decorators like [test]. Instead, use the test_ prefix.
- Organize feature tests under the tests/Feature/Api/ folder and unit tests under tests/Unit/Api/. Subfolders may be used where necessary.
- When testing emails, services, events, or external API calls, these must be mocked.
- Implementing or updating tests must not alter the existing logic of the codebase to match what is defined in the test.
- If a test fails because of "anything" missing in the codebase (e.g. Model Class) not found in the codebase, delete that test.
- When fixing a test consider calling rules/tools/responsePayload and rules/tools/requestPayload to get the correct payloads for the test.