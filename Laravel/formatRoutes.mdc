---
description: Formatting and Cleaning Route definitions
globs: 
alwaysApply: false
---
# About the cleaning process
The goal of the process is to clean the routes file and make it more readable, maintainable and to guarantee the following:
* The routes are well organized and placed in the correct file.
* The routes are well named and descriptive.
* The routes are well documented and follow the project documentation.
* The routes are well structured and follow the project structure.
* There are no duplicate routes.

# Follow these rules to format the routes file
NOTE: Routes for this project are structured into three files, public, api, and admin routes all applies api middleware.
* public routes: these are the routes that are accessible to all users without authentication.
* api routes: these are the routes that are accessible to all users with authentication
* admin routes: these are the routes that are accessible to all users with authentication and are only accessible to admin users
- If any of the routes files is not available create it and make sure it is properly registered as an api middleware in the RouteServiceProvider.php file.
- NEVER user resource routes (i.e Route::resource() or Route::apiResource()) instead use Route::get(), Route::post(), Route::put(), Route::delete() e.t.c to define routes.

# How to clean the routes files
- Start witht the api routes file and clean it first. look for routes that are not related to the api and move them to their respective files.
- Then clean the admin routes file. look for routes that are not related to the admin and move them to their respective files.
- All routes in api and admin routes should be authenticated. except for login, register, forgot password, reset password, and verify email defined in those files.
- All routes in public.php routes should be unauthenticated.
- All routes in admin routes should be prefixed with admin.

- For each grouped routes make sure that the core routes in a group are placed at the end of the group. e.g if we have a group for users and documents then the core routes for users should be placed at the end of the group. See the example below: document routes are grouped above the users routes. user is the core route. since they apply prefix as the route name
example:
```php

Route::prefix('users')->group(function () {

    // Document routes
    Route::get('/{user}/documents', [UserDocumentController::class, 'index']);
    Route::get('/{user}/documents/{document}', [UserDocumentController::class, 'show']);
    Route::post('/{user}/documents', [UserDocumentController::class, 'store']);
    Route::put('/{user}/documents/{document}', [UserDocumentController::class, 'update']);
    Route::delete('/{user}/documents/{document}', [UserDocumentController::class, 'destroy']);

    // Core routes
    Route::get('/', [UserController::class, 'index']);
    Route::get('/{id}', [UserController::class, 'show']);
    Route::post('/', [UserController::class, 'store']);
    Route::put('/{id}', [UserController::class, 'update']);
    Route::delete('/{id}', [UserController::class, 'destroy']);

});
```

IMPORTANT TO NOTE:
- Route formating is contained within the route files, and should not lead to changing Controllers or any other part of the codebase.